#!/usr/local/bin/python

import sys
import os
import xlrd
import time
import glob
import smtplib
import string
from datetime import datetime, timedelta
from ftplib import FTP

#create directories to store data
textDirectory = "./rainGages/"
excelDirectory = "./excelSheets/"
swridDirectory = "./incoming/"
saveDirectory = "./text/"

#number of days of data to write to the output file
numDays = 31 

#use FTP to get new files (True) or use existing files (False)
ftpNewFiles = True

#turn "on" or "off" to send email with error messages
sendEmail = False

#Turn verbose on for status messages
verbose = True

#If the data is more than 3 days old, we need to send an email saying so
#Setting up a varaiable 
currentData = False
threeDaysAgo = datetime.now() - timedelta(days=3)
threeDaysAgo = threeDaysAgo.strftime('%b'+" "+'%d'+", "+'%Y')

#global variables 
newGageXls = []
newGageTimestamp = {}
newGageTimestampArray = []

#operating system commands
os_cp_1 = "cp " + textDirectory + "RG_*.000 " + swridDirectory
os_cp_2 = "cp " + textDirectory + "RG_*.000 " + saveDirectory

##########################################################################################
#function to send email containing what error occurred if sendEmail switch is set to True#
##########################################################################################
def email( str ):
    MAILX = "/usr/bin/mailx"
    FROM = "jalwes@usgs.gov"
    TO = ['jdalwes@gmail.com', 'tortel@usgs.gov']

    SUBJECT = str 
 
    TEXT = str+". Generated by excelToText.py on nwisil."


    message = """\
From: %s
To: %s
Subject: %s
%s
""" % (FROM, ", ".join(TO), SUBJECT, TEXT)

    p = os.popen("%s -t -i" % MAILX, "w")
    p.write(message)
    status = p.close()
    if status:
        print "mailx exit status", status
#########################################################################################
     
if not os.path.exists(textDirectory):
    os.makedirs(textDirectory)
if not os.path.exists(excelDirectory):
    os.makedirs(excelDirectory)

#delete output files from prior run
if verbose: 
    print "Deleting output files from previous runs..."
for oldDataFile in os.listdir(textDirectory):
    if oldDataFile.endswith(".000"):
	# print 'File: ', textDirectory + oldDataFile
	os.unlink(textDirectory + oldDataFile)

#callback ftp function to find raingage files
newGageXls = []
newGageTimestamp = {}
def findRainGages(string):
    if "NewRainGages" in string and ".xls" in string:
        newGageXls.append(string)


#get files from DuPage County FTP site
if ftpNewFiles:
    if verbose:
        print "Beginning ftp process..."  
    #open FTP connection to dupageco to get excel sheets
    try:
        host = "ftp.ec.dupageco.org"
        ftp = FTP(host, "usgs","Urbana")
        ftp.cwd("./Environmental_Concerns")
        ftp.retrlines("NLST",findRainGages)
        if verbose:
            print "Connected to ftp host..."
    except:    
        if verbose:
            print "Could not connect to ftp host. "
            print "Exiting program..."
        if sendEmail:
            error = "FTP error. Could not connect to "+host+"."
            email(error)
        quit()
    try:
        if verbose:
            print "Retrieving files..."

        for filename in newGageXls:
            lIndex = filename.index("_")
            rIndex = filename.index(".xls")
            month = filename[lIndex+1:lIndex+4]
            year = filename[lIndex+4:rIndex]
  	  # print 'lIndex rIndex month year ', lIndex, rIndex, month, year
            newGageTimestamp[filename] = time.strptime(month + " " + year, "%b %Y")

        newGageTimestampArray = sorted(newGageTimestamp,key =  newGageTimestamp.get)

        #download only the latest month of rain gage data
        newGageTimestampArray = newGageTimestampArray[-2:]

        #transfer excel sheet to local computer
        for filehandle in newGageTimestampArray:
            f = open(excelDirectory+filehandle,"wb")
            ftp.retrbinary("RETR " + filehandle,f.write)
            f.close()
        ftp.quit()
    
    except:
        if verbose:
            print "Trouble retrieving files from host. "
            print "Exiting program..."
        if sendEmail:
            error = "FTP error. Error retrieving files from "+host+"."
            email(error)
        quit()

#get file list from excelDirectory for processing
if verbose:
    print "Getting file list from excelDirectory for processing..."
#empty the array and hash list
newGageXls[:] = []
newGageTimestamp.clear()
newGageTimestampArray[:] = []

newGageXls = glob.glob(excelDirectory + "*.xls")

for filename in newGageXls:
    # strip off the path to get the filename
    lIndex = filename.index("NewRainGages")
    rIndex = filename.index(".xls") + 4
    filename = filename[lIndex:rIndex]
    # print filename
    lIndex = filename.index("_")
    rIndex = filename.index(".xls")
    month = filename[lIndex+1:lIndex+4]
    year = filename[lIndex+4:rIndex]
    newGageTimestamp[filename] = time.strptime(month + " " + year, "%b %Y")
    newGageTimestampArray = sorted(newGageTimestamp,key =  newGageTimestamp.get)
    newGageTimestampArray = newGageTimestampArray[-2:]

# for filename in newGageTimestampArray:
#    print filename
# quit()

colVal = {}
gages = {}
dateCol = -1
dataStructInit = False

#for each sheet in each excel workbook
currentData = False
if verbose:
    print "Converting data..."
for book in newGageTimestampArray:
    lIndex = book.index("_")
    rIndex = book.index(".xls")
    mostRecentMonth = book[lIndex+1:lIndex+4]
    mostRecentYear = book[lIndex+4:lIndex+8]

    if verbose:
        print "Current book: "+excelDirectory+book
    try:
        book = xlrd.open_workbook(excelDirectory+book)
    except:
        if verbose:
            print book+" is a corrupt file....closing."
        if sendEmail:
            error = "There was an error with converting data. "+excelDirectory+book+" is a corrupt file"
            email(error)
        quit()    

    for sh in xrange(book.nsheets):
        sheet = book.sheet_by_index(sh)
        #ignore template sheet
        if sheet.name == "Template":
            continue
        if sheet.name != "Template":
            mostRecentDay = sheet.name
            mostRecentDate = mostRecentMonth + " " + mostRecentDay + ", " + mostRecentYear
        if mostRecentDate == threeDaysAgo:
            currentData = True

        for row in xrange(sheet.nrows):
            #format is same across all sheets, only need to set up
            #data structure once
            if not dataStructInit:
                #skip blank headers
                if xlrd.XL_CELL_TEXT not in sheet.row_types(row):
                    continue
                #column titles
                else:
                    dataStructInit = True
                    for col in xrange(sheet.ncols):
                        if sheet.cell_type(row,col) == xlrd.XL_CELL_TEXT:
                            #mark which column contains date
                            if sheet.cell_value(row,col) == "Date":
                                dateCol = col
                                #associate column with raingage
                            else:
                                colVal[col] = sheet.cell_value(row,col)
                                gages[col] = {}
                    continue
            #record data points for each gage at each time
            else:
                if sheet.cell_type(row,dateCol) != xlrd.XL_CELL_DATE:
                    continue
                timestamp = xlrd.xldate_as_tuple(sheet.cell_value(row,dateCol),book.datemode)
                for col in xrange(dateCol+1,sheet.ncols):
                    if col not in colVal:
                        continue
                    else:
                        if sheet.cell_type(row,col) != xlrd.XL_CELL_NUMBER:
                            gages[col][timestamp] = "?"
                        else:
                            gages[col][timestamp] = sheet.cell_value(row,col)

if currentData == False:
    message = "Data is more than 3 days old. Most recent data we have is " + mostRecentDate
    email(message)
if verbose:
    print "Most recent data we have is from " + mostRecentMonth + " " + mostRecentDay + ", " + mostRecentYear 

#store columns for creek data
if verbose:
    print "Storing columns for creek data..."
creekColumnNames = ["Harger","Irving","Salt","Diversion"]
creekColumnNum = [-1,-1,-1,-1]
latestTime = 0
gageArray = []
#print RG data to files
for col in colVal:
    if colVal[col][:2] == "RG":
        filename = textDirectory+colVal[col][:2]+"_"+colVal[col][2:]+".000"
    else:
        for x in xrange(4):
            if creekColumnNames[x] in colVal[col]:
                creekColumnNum[x] = col
                break
        continue
    f = open(filename,"w")
    gageArray = sorted(gages[col])
    f.write("\n\n\n")
    if colVal[col][:2] == "RG":
        f.write("     Date     Time     " + (colVal[col][:2]+"-"+colVal[col][2:] )+ "\n")
    lastestTime = datetime(*gageArray[-1])
    for time in gageArray:
        date = datetime(*time)
        #print items from the last numDays days
        if abs((date-lastestTime).days) <= numDays and date < datetime.now():
            #formatted to work with other scripts that use these files
            if gages[col][time] == "?":
                f.write(date.strftime("  %m/%d/%y %H:%M:%S") + "%7s"%gages[col][time] +"\n")
            elif gages[col][time] >= 10.0:
                f.write(date.strftime("  %m/%d/%y %H:%M:%S") +  "%7s"%('%.1f' % gages[col][time]) +"\n")
            else:
                f.write(date.strftime("  %m/%d/%y %H:%M:%S") +  "%7s"%('%.2f' % gages[col][time]) +"\n")
    f.close()

#print creek file data
if verbose:
    print "Printing creek file data..."
f = open(textDirectory+"creek.000","w")
f.write("Creek Stage Levels\n\n" + "%21s"%"")
for x in xrange(4):
    if x ==0:
        f.write("%10s"%creekColumnNames[x])
    else:
	if creekColumnNames[x] == "Salt":
            f.write("     Wooddale")
	else:
            f.write("%13s"%creekColumnNames[x])
f.write("\n")
for time in gageArray:
    date = datetime(*time)
	#print items from the last numDays days
    if abs((date-lastestTime).days) <= numDays and date < datetime.now():
        string = date.strftime("    %m/%d/%y %H:%M:%S")
        for x in xrange(4):
            col = creekColumnNum[x]
            spaceformat = "%13s"
            if x == 0:
                spaceformat = "%10s"
            if gages[col][time] == "?":
                string += spaceformat%gages[col][time]
            else:
                string += spaceformat%('%.2f' % gages[col][time])
        string += "    \n"
        f.write(string)
f.close()

#copy files to swrid and save directories
### 2013.06.12 - testing, don't copy to incoming
#os.system(os_cp_1) 
os.system(os_cp_2) 
if verbose:
    print "Done."


